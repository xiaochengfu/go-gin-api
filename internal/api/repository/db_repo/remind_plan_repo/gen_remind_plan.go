///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package remind_plan_repo

import (
	"fmt"
	"time"

	"github.com/xinliangnote/go-gin-api/internal/api/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *RemindPlan {
	return new(RemindPlan)
}

func NewQueryBuilder() *remindPlanRepoQueryBuilder {
	return new(remindPlanRepoQueryBuilder)
}

func (t *RemindPlan) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type remindPlanRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *remindPlanRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *remindPlanRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&RemindPlan{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *remindPlanRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&RemindPlan{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *remindPlanRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&RemindPlan{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *remindPlanRepoQueryBuilder) First(db *gorm.DB) (*RemindPlan, error) {
	ret := &RemindPlan{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *remindPlanRepoQueryBuilder) QueryOne(db *gorm.DB) (*RemindPlan, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *remindPlanRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*RemindPlan, error) {
	var ret []*RemindPlan
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *remindPlanRepoQueryBuilder) Limit(limit int) *remindPlanRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *remindPlanRepoQueryBuilder) Offset(offset int) *remindPlanRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereId(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereIdIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereIdNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderById(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereName(p db_repo.Predicate, value string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereNameIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereNameNotIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByName(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUserId(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUserIdIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUserIdNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByUserId(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_id "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCategoryId(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "category_id", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCategoryIdIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "category_id", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCategoryIdNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "category_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByCategoryId(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "category_id "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereLibraryId(p db_repo.Predicate, value string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "library_id", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereLibraryIdIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "library_id", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereLibraryIdNotIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "library_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByLibraryId(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "library_id "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereTime(p db_repo.Predicate, value string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "time", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereTimeIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "time", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereTimeNotIn(value []string) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByTime(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "time "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereStatus(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereStatusIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereStatusNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByStatus(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereType(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereTypeIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereTypeNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByType(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCircleType(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "circle_type", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCircleTypeIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "circle_type", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCircleTypeNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "circle_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByCircleType(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "circle_type "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCreateTime(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCreateTimeIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereCreateTimeNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByCreateTime(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUpdateTime(p db_repo.Predicate, value int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", p),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUpdateTimeIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", "IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) WhereUpdateTimeNotIn(value []int32) *remindPlanRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *remindPlanRepoQueryBuilder) OrderByUpdateTime(asc bool) *remindPlanRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "update_time "+order)
	return qb
}
